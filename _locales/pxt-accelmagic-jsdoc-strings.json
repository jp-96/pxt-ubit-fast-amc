{
  "AngleRPY": "Enum for selecting angles in Euler angles.",
  "AngleRPY.Azimuth": "Azimuth angle (derived from the yaw angle)",
  "AngleRPY.Pitch": "Pitch angle (rotation around the Y-axis)",
  "AngleRPY.Roll": "Roll angle (rotation around the X-axis)",
  "AngleRPY.Yaw": "Yaw angle (rotation around the Z-axis)",
  "accelmagic": "A Simplified Analytic Attitude Determination Algorithm\nusing Accelerometer and Magnetometer on micro:bit.\n* It's like magic! This algorithm turns raw data into accurate and efficient quaternion estimations,\ntransforming your projects and making you go, \"Wow!\" Using the handy micro:bit, it feels like trying\nout quaternions is pure magic. AccelMagiQ brings a touch of enchantment to the technical world.\nWe hope this helps you in your learning journey and sparks your curiosity about the fascinating\nworld of quaternions.\n* \"AccelMagiQ\" refers to this amazing algorithm that combines accelerometer and magnetometer data to\ncreate precise quaternion calculations. It's a playful blend of 'acceleration', 'magnetometer', and 'magic' with\nquaternions ('Q'), making advanced concepts seem like magic!",
  "accelmagic.EulerAngles": "A class to represent Euler angles for 3D rotations.",
  "accelmagic.EulerAngles.fromArray": "Creates an instance of EulerAngles from an array.\n\n@returns An instance of EulerAngles. If there is an inconsistency, it returns the identity.",
  "accelmagic.EulerAngles.fromArray|param|rpy": "[roll, pitch, yaw] - The Euler angles in radians.",
  "accelmagic.EulerAngles.fromQuaternion": "Creates an instance of EulerAngles from a Quaternion.\n\n@returns An instance of EulerAngles.",
  "accelmagic.EulerAngles.fromQuaternion|param|q": "An instance of Quaternion.",
  "accelmagic.EulerAngles.getAzimuth": "Computes the azimuth angle from the yaw angle.\n@returns The azimuth angle in radians.",
  "accelmagic.EulerAngles.toArray": "Converts the Euler angles to an array.\n@returns An array [roll, pitch, yaw] representing the Euler angles in radians.",
  "accelmagic.Quaternion": "A class to represent a quaternion for 3D rotations.",
  "accelmagic.Quaternion.conjugate": "Computes the conjugate of the quaternion.\n@returns The conjugate of the quaternion.",
  "accelmagic.Quaternion.fromArray": "Creates a quaternion from an array.\n\n@returns An instance of Quaternion. If there is an inconsistency, it returns the identity quaternion.",
  "accelmagic.Quaternion.fromArray|param|q": "[w, x, y, z] - The quaternion components.",
  "accelmagic.Quaternion.fromEulerAngles": "Creates a quaternion from Euler angles.\n\n@returns An instance of Quaternion.",
  "accelmagic.Quaternion.fromEulerAngles|param|rpy": "An instance of EulerAngles.",
  "accelmagic.Quaternion.getRotationAngle": "Computes the rotation angle of the quaternion.\n@returns The rotation angle in radians.",
  "accelmagic.Quaternion.multiply": "Multiplies this quaternion by another quaternion.\n\n@returns The product of the two quaternions.",
  "accelmagic.Quaternion.multiply|param|q": "Another quaternion.",
  "accelmagic.Quaternion.normalize": "Normalizes the quaternion.\n@returns A unit quaternion or the identity quaternion if normalization fails.",
  "accelmagic.Quaternion.toArray": "Converts the quaternion to an array.\n@returns An array [w, x, y, z] representing the quaternion.",
  "accelmagic.angle": "Retrieves a specific angle from EulerAngles.\n\n\n@returns The specified angle in radians.",
  "accelmagic.angle|param|angleRPY": "The angle to retrieve (Roll, Pitch, Yaw, or Azimuth).",
  "accelmagic.angle|param|rpy": "An instance of EulerAngles.",
  "accelmagic.conjugate": "Computes the conjugate of the quaternion.\n\n@returns The conjugate of the quaternion.",
  "accelmagic.conjugate|param|q": "An instance of Quaternion.",
  "accelmagic.decDeg": "Converts radians to decimal degrees.\n\n@returns The angle in decimal degrees.",
  "accelmagic.decDeg|param|radian": "The angle in radians.",
  "accelmagic.diff": "Computes the difference between two quaternions.\n\n\n@returns The difference between the two quaternions.",
  "accelmagic.diff|param|a": "The first quaternion.",
  "accelmagic.diff|param|b": "The second quaternion.",
  "accelmagic.estimate": "Estimates the current quaternion.\n@returns An array containing the quaternion components [w, x, y, z].",
  "accelmagic.intDeg": "Converts radians to integer degrees.\n\n@returns The angle in integer degrees.",
  "accelmagic.intDeg|param|radian": "The angle in radians.",
  "accelmagic.multiply": "Multiplies two quaternions.\n\n\n@returns The product of the two quaternions.",
  "accelmagic.multiply|param|a": "The first quaternion.",
  "accelmagic.multiply|param|b": "The second quaternion.",
  "accelmagic.normalize": "Normalizes the quaternion.\n\n@returns A normalized Quaternion.",
  "accelmagic.normalize|param|q": "An instance of Quaternion.",
  "accelmagic.quat": "Creates a quaternion.\n\n\n\n\n@returns An instance of Quaternion.",
  "accelmagic.quatAsArray": "Converts the quaternion to an array.\n\n@returns An array [w, x, y, z] representing the quaternion.",
  "accelmagic.quatAsArray|param|q": "An instance of Quaternion.",
  "accelmagic.quatFrom": "Creates a quaternion from an array.\n\n@returns An instance of Quaternion. If there is an inconsistency, it returns the identity quaternion.",
  "accelmagic.quatFromRpy": "Creates a quaternion from Euler angles.\n\n@returns An instance of Quaternion.",
  "accelmagic.quatFromRpy|param|rpy": "An instance of EulerAngles.",
  "accelmagic.quatFrom|param|q": "An array [w, x, y, z].",
  "accelmagic.quatRotationAngle": "Computes the rotation angle of the quaternion.\n\n@returns The rotation angle in radians.",
  "accelmagic.quatRotationAngle|param|q": "An instance of Quaternion.",
  "accelmagic.quat|param|w": "Scalar part (w): Represents the magnitude or angle of rotation.",
  "accelmagic.quat|param|x": "Vector part (x): Indicates the x-axis of rotation.",
  "accelmagic.quat|param|y": "Vector part (y): Indicates the y-axis of rotation.",
  "accelmagic.quat|param|z": "Vector part (z): Indicates the z-axis of rotation.",
  "accelmagic.rad": "Converts degrees to radians.\n\n@returns The angle in radians.",
  "accelmagic.rad|param|degree": "The angle in degrees.",
  "accelmagic.rpy": "Creates an instance of EulerAngles.\n\n\n\n@returns An instance of EulerAngles.",
  "accelmagic.rpyAsArray": "Converts the Euler angles to an array.\n\n@returns An array [roll, pitch, yaw] representing the Euler angles in radians.",
  "accelmagic.rpyAsArray|param|rpy": "An instance of EulerAngles.",
  "accelmagic.rpyFrom": "Creates an instance of EulerAngles from an array.\n\n@returns An instance of EulerAngles. If there is an inconsistency, it returns the identity.",
  "accelmagic.rpyFromQuat": "Creates an instance of EulerAngles from a quaternion.\n\n@returns An instance of EulerAngles.",
  "accelmagic.rpyFromQuat|param|q": "An instance of Quaternion.",
  "accelmagic.rpyFrom|param|rpy": "An array [roll, pitch, yaw].",
  "accelmagic.rpy|param|pitch": "Rotation around the Y-axis. It’s how much nose is up or down.",
  "accelmagic.rpy|param|roll": "Rotation around the X-axis. It’s how much tilts to its sides.",
  "accelmagic.rpy|param|yaw": "Rotation around the Z-axis.",
  "accelmagic.setAlpha": "Sets the alpha value for the low-pass filter.",
  "accelmagic.setAlpha|param|alpha": "The new alpha value (between 0.0 and 1.0). Default is 0.8.",
  "accelmagic.updateAcc": "Updates the acceleration values.",
  "accelmagic.updateAcc|param|x": "X-axis acceleration",
  "accelmagic.updateAcc|param|y": "Y-axis acceleration",
  "accelmagic.updateAcc|param|z": "Z-axis acceleration",
  "accelmagic.updateMag": "Updates the magnetic force values.",
  "accelmagic.updateMag|param|x": "X-axis magnetic force",
  "accelmagic.updateMag|param|y": "Y-axis magnetic force",
  "accelmagic.updateMag|param|z": "Z-axis magnetic force"
}